{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aunishukri/medicalanalyzer/blob/main/medicalanalyzer.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install necessary packages\n",
        "!pip install transformers datasets scikit-learn matplotlib\n",
        "\n",
        "# Import libraries\n",
        "from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments\n",
        "from sklearn.model_selection import train_test_split\n",
        "from datasets import Dataset\n",
        "import torch\n",
        "import numpy as np\n",
        "from sklearn.metrics import precision_recall_fscore_support,accuracy_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Data preparation\n",
        "# Extended data preparation with more examples\n",
        "data = [\n",
        "    {\"text\": \"The patient has a high fever (39°C) and chills.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient feels tired but has no fever.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"Fever with sore throat and body aches.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"Mild headache with no fever.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient has a severe headache and a high temperature.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient complains of fatigue and body aches but no fever.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"High fever with shivering and sweating.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"No fever but the patient has a mild cough and congestion.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient experiences chills and a high fever.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient has a normal temperature but feels very tired.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient has a high fever and a sore throat.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient feels dizzy but has no fever.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient has a fever and is sweating heavily.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient has no fever but complains of a headache.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"High fever and severe body aches.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient has no fever but feels very weak.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient has chills and a high fever.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient feels nauseous but has no fever.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient has a high fever and a headache.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient has no fever but feels exhausted.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient has a high fever and is shivering.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient has no fever but feels unwell.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient has a high fever and body aches.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient has no fever but feels weak.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    # Class 1 - Fever\n",
        "    {\"text\": \"The patient reports a fever and chills with body aches.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"High fever along with severe sweating and fatigue.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"Symptoms include a fever of 38°C, sore throat, and shivering.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"Fever accompanied by a headache and muscle pain.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "    {\"text\": \"The patient has a fever, feels weak, and is experiencing sweating.\", \"label\": 1, \"medication\": \"Paracetamol\"},\n",
        "\n",
        "    # Class 0 - No Fever\n",
        "    {\"text\": \"Mild dizziness and headache but no fever recorded.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient complains of congestion but denies fever.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"No fever, but the patient has a sore throat and fatigue.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "    {\"text\": \"The patient reports weakness and tiredness but no fever.\", \"label\": 0, \"medication\": \"Rest and hydration\"},\n",
        "]\n",
        "\n",
        "# Convert to Hugging Face Dataset\n",
        "df = Dataset.from_list(data)\n",
        "\n",
        "# Split data into train and test sets\n",
        "train_test = df.train_test_split(test_size=0.2, seed=42)\n",
        "train_data = train_test[\"train\"]\n",
        "test_data = train_test[\"test\"]\n",
        "\n",
        "# Load BERT tokenizer and model\n",
        "tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n",
        "model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\", num_labels=2)  # Two labels: Fever or No Fever\n",
        "\n",
        "# Preprocess data\n",
        "def preprocess(data):\n",
        "    return tokenizer(data[\"text\"], padding=\"max_length\", truncation=True, max_length=128)\n",
        "\n",
        "train_data = train_data.map(preprocess, batched=True)\n",
        "test_data = test_data.map(preprocess, batched=True)\n",
        "\n",
        "# Set format for PyTorch\n",
        "train_data.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"label\"])\n",
        "test_data.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"label\"])\n",
        "\n",
        "# Define training arguments\n",
        "training_args = TrainingArguments(\n",
        "    output_dir=\"./results\",\n",
        "    evaluation_strategy=\"epoch\",\n",
        "    save_strategy=\"epoch\",\n",
        "    num_train_epochs=10,\n",
        "    per_device_train_batch_size=16,\n",
        "    per_device_eval_batch_size=16,\n",
        "    warmup_steps=300,\n",
        "    weight_decay=0.01,\n",
        "    logging_dir=\"./logs\",\n",
        "    logging_steps=10,\n",
        "    learning_rate=5e-5,  # Adjust learning rate\n",
        ")\n",
        "\n",
        "# Define compute_metrics function to calculate evaluation metrics\n",
        "def compute_metrics(p):\n",
        "    preds = np.argmax(p.predictions, axis=1)\n",
        "    precision, recall, f1, _ = precision_recall_fscore_support(p.label_ids, preds, average='binary',zero_division=1)\n",
        "    accuracy = accuracy_score(p.label_ids, preds)\n",
        "    return {\"accuracy\": accuracy,\"precision\": precision, \"recall\": recall, \"f1\": f1}\n",
        "\n",
        "# Initialize Trainer\n",
        "trainer = Trainer(\n",
        "    model=model,\n",
        "    args=training_args,\n",
        "    train_dataset=train_data,\n",
        "    eval_dataset=test_data,\n",
        "    tokenizer=tokenizer,\n",
        "    compute_metrics=compute_metrics,\n",
        ")\n",
        "\n",
        "# Train the model and keep track of the training logs\n",
        "train_result = trainer.train()\n",
        "trainer.save_model()  # Save the model\n",
        "\n",
        "# Evaluate the model\n",
        "metrics = trainer.evaluate()\n",
        "print(\"Evaluation Metrics:\", metrics)\n",
        "\n",
        "\n",
        "# Save the trained model and tokenizer\n",
        "model.save_pretrained(\"fever_detection_model\")\n",
        "tokenizer.save_pretrained(\"fever_detection_tokenizer\")\n",
        "\n",
        "# Plot accuracy vs iterations\n",
        "logs = trainer.state.log_history\n",
        "\n",
        "# Extract accuracy and steps from logs\n",
        "steps = []\n",
        "accuracies = []\n",
        "for log in logs:\n",
        "    if 'eval_accuracy' in log:\n",
        "        steps.append(log['step'])\n",
        "        accuracies.append(log['eval_accuracy'])\n",
        "\n",
        "# Plotting the graph\n",
        "plt.plot(steps, accuracies, marker='o')\n",
        "plt.xlabel(\"Steps\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Accuracy vs Steps\")\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "c7251ae2e9cb44979702edf0e15112cf",
            "e07740fa1e4d4e4581f9e13c9f051c4c",
            "bd9045a968574336b795c6ea495741d6",
            "49fac4811f5e48af9bbf43ec2d204b13",
            "e506614ef2564fa69b4647d8611904b3",
            "82ff1d1f590143c1b9b075e182052072",
            "0a4ca7cc390c4552abfa9e779e10897f",
            "cad39de900bd4354a3c38a478243bc7d",
            "c5e71e82dff64fd5b95c1c4511293aa5",
            "aec89e645a8a419688cc38775a8633ca",
            "ab8854f49eb1448f96e99d737b71a0f0",
            "5202c29a607c44ebb64f797624f6ebe2",
            "c70de9546de04c10825c137eeb69b8b3",
            "7f0c7448110949659a2ca91e87690fd9",
            "5ec567ca313b4205af5184e60df435fb",
            "421b0adc20cc4330afb79c8c829b0bac",
            "4568c7376aba4329b01368812c02441b",
            "7ae671b9ce9a4c1d85a6314965dc169a",
            "bad42d8072844c4e936afffa72d19b5d",
            "9de191c3d6014f9e85b5bc3b7a51b0cd",
            "725432b69f5a45cfa25b6fd115aa7567",
            "4988a34b3f24414b945da5fce490b041"
          ]
        },
        "id": "KDkKmSgRR_he",
        "outputId": "5420d53f-e53d-4e50-8458-89eff4a3fd62"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.47.1)\n",
            "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (3.2.0)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.17.0)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.27.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.0)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.2)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
            "Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (17.0.0)\n",
            "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.2)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\n",
            "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\n",
            "Requirement already satisfied: fsspec<=2024.9.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2024.9.0,>=2023.1.0->datasets) (2024.9.0)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from datasets) (3.11.11)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.55.4)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (2.4.4)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (24.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (6.1.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (0.2.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets) (1.18.3)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers) (4.12.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2024.12.14)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.1)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Map:   0%|          | 0/27 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c7251ae2e9cb44979702edf0e15112cf"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Map:   0%|          | 0/7 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5202c29a607c44ebb64f797624f6ebe2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n",
            "  warnings.warn(\n",
            "<ipython-input-10-dfef3d97d07c>:101: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n",
            "  trainer = Trainer(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "    <div>\n",
              "      \n",
              "      <progress value='20' max='20' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      [20/20 15:35, Epoch 10/10]\n",
              "    </div>\n",
              "    <table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              " <tr style=\"text-align: left;\">\n",
              "      <th>Epoch</th>\n",
              "      <th>Training Loss</th>\n",
              "      <th>Validation Loss</th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>No log</td>\n",
              "      <td>0.670921</td>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>No log</td>\n",
              "      <td>0.670166</td>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>No log</td>\n",
              "      <td>0.669004</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>No log</td>\n",
              "      <td>0.666397</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>5</td>\n",
              "      <td>0.691100</td>\n",
              "      <td>0.662854</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>6</td>\n",
              "      <td>0.691100</td>\n",
              "      <td>0.656115</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>7</td>\n",
              "      <td>0.691100</td>\n",
              "      <td>0.648141</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>8</td>\n",
              "      <td>0.691100</td>\n",
              "      <td>0.642238</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>9</td>\n",
              "      <td>0.691100</td>\n",
              "      <td>0.636027</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>10</td>\n",
              "      <td>0.653100</td>\n",
              "      <td>0.630468</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.800000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><p>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "    <div>\n",
              "      \n",
              "      <progress value='1' max='1' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      [1/1 : < :]\n",
              "    </div>\n",
              "    "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Evaluation Metrics: {'eval_loss': 0.6304675936698914, 'eval_accuracy': 0.8571428571428571, 'eval_precision': 0.6666666666666666, 'eval_recall': 1.0, 'eval_f1': 0.8, 'eval_runtime': 4.1127, 'eval_samples_per_second': 1.702, 'eval_steps_per_second': 0.243, 'epoch': 10.0}\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67Gx9rtA3Qcg",
        "outputId": "aa7dbd9f-d641-45ac-ddde-744804b71985"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Probabilities: No fever=0.550872802734375, Fever=0.4491272568702698\n",
            "This patient has : No fever\n",
            "Recommended Medication for patient to take: Rest and hydration\n"
          ]
        }
      ],
      "source": [
        "#pretrained model to use it make predictions on new data\n",
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "import torch\n",
        "\n",
        "# Load the trained model and tokenizer\n",
        "model = BertForSequenceClassification.from_pretrained(\"fever_detection_model\")\n",
        "tokenizer = BertTokenizer.from_pretrained(\"fever_detection_tokenizer\")\n",
        "\n",
        "# Prediction function\n",
        "def predict(text):\n",
        "    inputs = tokenizer(text, return_tensors=\"pt\", truncation=True, max_length=128, padding=\"max_length\")\n",
        "    outputs = model(**inputs)\n",
        "    logits = outputs.logits\n",
        "    probabilities = torch.nn.functional.softmax(logits, dim=1).squeeze()\n",
        "\n",
        "    predicted_label = torch.argmax(probabilities).item()\n",
        "    probability_no_fever = probabilities[0].item()\n",
        "    probability_fever = probabilities[1].item()\n",
        "\n",
        "    print(f\"Probabilities: No fever={probability_no_fever}, Fever={probability_fever}\")\n",
        "\n",
        "    diagnosis = \"Fever detected\" if predicted_label == 1 else \"No fever\"\n",
        "\n",
        "    # Medication mapping\n",
        "    medication = {\n",
        "        \"Fever detected\": \"Paracetamol\",\n",
        "        \"No fever\": \"Rest and hydration\"\n",
        "    }\n",
        "\n",
        "    return diagnosis, medication[diagnosis]\n",
        "\n",
        "# Test the inference\n",
        "text = \"The patient feels tired but has no fever.\"\n",
        "diagnosis, recommended_medication = predict(text)\n",
        "print(f\"This patient has : {diagnosis}\")\n",
        "print(f\"Recommended Medication for patient to take: {recommended_medication}\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPu5DnjDBJr7rhP1PXHRyhQ",
      "include_colab_link" : True

    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "c7251ae2e9cb44979702edf0e15112cf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e07740fa1e4d4e4581f9e13c9f051c4c",
              "IPY_MODEL_bd9045a968574336b795c6ea495741d6",
              "IPY_MODEL_49fac4811f5e48af9bbf43ec2d204b13"
            ],
            "layout": "IPY_MODEL_e506614ef2564fa69b4647d8611904b3"
          }
        },
        "e07740fa1e4d4e4581f9e13c9f051c4c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": None,
            "layout": "IPY_MODEL_82ff1d1f590143c1b9b075e182052072",
            "placeholder": "​",
            "style": "IPY_MODEL_0a4ca7cc390c4552abfa9e779e10897f",
            "value": "Map: 100%"
          }
        },
        "bd9045a968574336b795c6ea495741d6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": None,
            "layout": "IPY_MODEL_cad39de900bd4354a3c38a478243bc7d",
            "max": 27,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c5e71e82dff64fd5b95c1c4511293aa5",
            "value": 27
          }
        },
        "49fac4811f5e48af9bbf43ec2d204b13": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": None,
            "layout": "IPY_MODEL_aec89e645a8a419688cc38775a8633ca",
            "placeholder": "​",
            "style": "IPY_MODEL_ab8854f49eb1448f96e99d737b71a0f0",
            "value": " 27/27 [00:00&lt;00:00, 217.50 examples/s]"
          }
        },
        "e506614ef2564fa69b4647d8611904b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": None,
            "align_items": None,
            "align_self": None,
            "border": None,
            "bottom": None,
            "display": None,
            "flex": None,
            "flex_flow": None,
            "grid_area":None,
            "grid_auto_columns": None,
            "grid_auto_flow": None,
            "grid_auto_rows": None,
            "grid_column": None,
            "grid_gap":None,
            "grid_row": None,
            "grid_template_areas": None,
            "grid_template_columns": None,
            "grid_template_rows":None,
            "height": None,
            "justify_content": None,
            "justify_items": None,
            "left": None,
            "margin": None,
            "max_height":None,
            "max_width": None,
            "min_height": None,
            "min_width": None,
            "object_fit": None,
            "object_position":None,
            "order": None,
            "overflow": None,
            "overflow_x": None,
            "overflow_y":None,
            "padding": None,
            "right": None,
            "top": None,
            "visibility":None,
            "width":None
          }
        },
        "82ff1d1f590143c1b9b075e182052072": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content":None,
            "align_items": None,
            "align_self": None,
            "border":None,
            "bottom": None,
            "display": None,
            "flex":None,
            "flex_flow":None,
            "grid_area":None,
            "grid_auto_columns":None,
            "grid_auto_flow":None,
            "grid_auto_rows": None,
            "grid_column":None,
            "grid_gap":None,
            "grid_row":None,
            "grid_template_areas":None,
            "grid_template_columns":None,
            "grid_template_rows":None,
            "height":None,
            "justify_content":None,
            "justify_items":None,
            "left":None,
            "margin": None,
            "max_height":None,
            "max_width":None,
            "min_height":None,
            "min_width":None,
            "object_fit": None,
            "object_position": None,
            "order": None,
            "overflow":None,
            "overflow_x":None,
            "overflow_y":None,
            "padding": None,
            "right":None,
            "top":None,
            "visibility": None,
            "width":None
          }
        },
        "0a4ca7cc390c4552abfa9e779e10897f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cad39de900bd4354a3c38a478243bc7d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": None,
            "align_items":None,
            "align_self": None,
            "border":None,
            "bottom": None,
            "display":None,
            "flex": None,
            "flex_flow":None,
            "grid_area":None,
            "grid_auto_columns":None,
            "grid_auto_flow":None,
            "grid_auto_rows":None,
            "grid_column":None,
            "grid_gap":None,
            "grid_row":None,
            "grid_template_areas": None,
            "grid_template_columns": None,
            "grid_template_rows": None,
            "height": None,
            "justify_content":None,
            "justify_items": None,
            "left":None,
            "margin":None,
            "max_height": None,
            "max_width": None,
            "min_height":None,
            "min_width":None,
            "object_fit":None,
            "object_position": None,
            "order": None,
            "overflow":None,
            "overflow_x":None,
            "overflow_y":None,
            "padding":None,
            "right":None,
            "top":None,
            "visibility":None,
            "width":None
          }
        },
        "c5e71e82dff64fd5b95c1c4511293aa5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count":None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color":None,
            "description_width": ""
          }
        },
        "aec89e645a8a419688cc38775a8633ca": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content":None,
            "align_items": None,
            "align_self":None,
            "border":None,
            "bottom": None,
            "display":None,
            "flex":None,
            "flex_flow":None,
            "grid_area":None,
            "grid_auto_columns":None,
            "grid_auto_flow":None,
            "grid_auto_rows":None,
            "grid_column":None,
            "grid_gap":None,
            "grid_row": None,
            "grid_template_areas":None,
            "grid_template_columns":None,
            "grid_template_rows":None,
            "height":None,
            "justify_content":None,
            "justify_items":None,
            "left": None,
            "margin": None,
            "max_height":None,
            "max_width": None,
            "min_height": None,
            "min_width":None,
            "object_fit":None,
            "object_position": None,
            "order": None,
            "overflow":None,
            "overflow_x":None,
            "overflow_y":None,
            "padding":None,
            "right":None,
            "top":None,
            "visibility":None,
            "width": None
          }
        },
        "ab8854f49eb1448f96e99d737b71a0f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5202c29a607c44ebb64f797624f6ebe2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count":None,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c70de9546de04c10825c137eeb69b8b3",
              "IPY_MODEL_7f0c7448110949659a2ca91e87690fd9",
              "IPY_MODEL_5ec567ca313b4205af5184e60df435fb"
            ],
            "layout": "IPY_MODEL_421b0adc20cc4330afb79c8c829b0bac"
          }
        },
        "c70de9546de04c10825c137eeb69b8b3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": None,
            "layout": "IPY_MODEL_4568c7376aba4329b01368812c02441b",
            "placeholder": "​",
            "style": "IPY_MODEL_7ae671b9ce9a4c1d85a6314965dc169a",
            "value": "Map: 100%"
          }
        },
        "7f0c7448110949659a2ca91e87690fd9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": None,
            "layout": "IPY_MODEL_bad42d8072844c4e936afffa72d19b5d",
            "max": 7,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_9de191c3d6014f9e85b5bc3b7a51b0cd",
            "value": 7
          }
        },
        "5ec567ca313b4205af5184e60df435fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": None,
            "layout": "IPY_MODEL_725432b69f5a45cfa25b6fd115aa7567",
            "placeholder": "​",
            "style": "IPY_MODEL_4988a34b3f24414b945da5fce490b041",
            "value": " 7/7 [00:00&lt;00:00, 63.49 examples/s]"
          }
        },
        "421b0adc20cc4330afb79c8c829b0bac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content":None,
            "align_items":None,
            "align_self":None,
            "border":None,
            "bottom": None,
            "display": None,
            "flex":None,
            "flex_flow": None,
            "grid_area":None,
            "grid_auto_columns": None,
            "grid_auto_flow": None,
            "grid_auto_rows":None,
            "grid_column":None,
            "grid_gap":None,
            "grid_row": None,
            "grid_template_areas": None,
            "grid_template_columns":None,
            "grid_template_rows": None,
            "height": None,
            "justify_content": None,
            "justify_items": None,
            "left": None,
            "margin": None,
            "max_height":None,
            "max_width": None,
            "min_height": None,
            "min_width": None,
            "object_fit": None,
            "object_position": None,
            "order": None,
            "overflow": None,
            "overflow_x": None,
            "overflow_y": None,
            "padding": None,
            "right": None,
            "top":None,
            "visibility": None,
            "width": None
          }
        },
        "4568c7376aba4329b01368812c02441b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count":None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": None,
            "align_items":None,
            "align_self":None,
            "border":None,
            "bottom": None,
            "display": None,
            "flex": None,
            "flex_flow": None,
            "grid_area":None,
            "grid_auto_columns":None,
            "grid_auto_flow": None,
            "grid_auto_rows": None,
            "grid_column": None,
            "grid_gap":None,
            "grid_row": None,
            "grid_template_areas": None,
            "grid_template_columns": None,
            "grid_template_rows": None,
            "height":None,
            "justify_content":None,
            "justify_items": None,
            "left": None,
            "margin": None,
            "max_height":None,
            "max_width": None,
            "min_height": None,
            "min_width":None,
            "object_fit":None,
            "object_position":None,
            "order":None,
            "overflow": None,
            "overflow_x":None,
            "overflow_y":None,
            "padding": None,
            "right": None,
            "top":None,
            "visibility":None,
            "width":None
          }
        },
        "7ae671b9ce9a4c1d85a6314965dc169a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bad42d8072844c4e936afffa72d19b5d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content":None,
            "align_items": None,
            "align_self": None,
            "border": None,
            "bottom": None,
            "display": None,
            "flex": None,
            "flex_flow":None,
            "grid_area": None,
            "grid_auto_columns": None,
            "grid_auto_flow":None,
            "grid_auto_rows": None,
            "grid_column": None,
            "grid_gap":None,
            "grid_row": None,
            "grid_template_areas":None,
            "grid_template_columns": None,
            "grid_template_rows":None,
            "height":None,
            "justify_content": None,
            "justify_items": None,
            "left": None,
            "margin": None,
            "max_height":None,
            "max_width":None,
            "min_height": None,
            "min_width": None,
            "object_fit": None,
            "object_position": None,
            "order":None,
            "overflow": None,
            "overflow_x": None,
            "overflow_y":None,
            "padding": None,
            "right": None,
            "top": None,
            "visibility": None,
            "width": None
          }
        },
        "9de191c3d6014f9e85b5bc3b7a51b0cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": None,
            "description_width": ""
          }
        },
        "725432b69f5a45cfa25b6fd115aa7567": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": None,
            "align_items": None,
            "align_self":None,
            "border": None,
            "bottom": None,
            "display": None,
            "flex": None,
            "flex_flow": None,
            "grid_area": None,
            "grid_auto_columns": None,
            "grid_auto_flow":None,
            "grid_auto_rows": None,
            "grid_column": None,
            "grid_gap": None,
            "grid_row": None,
            "grid_template_areas": None,
            "grid_template_columns": v,
            "grid_template_rows":None,
            "height": None,
            "justify_content":None,
            "justify_items":None,
            "left": None,
            "margin": None,
            "max_height": None,
            "max_width": None,
            "min_height": None,
            "min_width": None,
            "object_fit": None,
            "object_position": v,
            "order": None,
            "overflow": None,
            "overflow_x":None,
            "overflow_y": None,
            "padding": None,
            "right":None,
            "top": None,
            "visibility": None,
            "width": None
          }
        },
        "4988a34b3f24414b945da5fce490b041": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": None,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
